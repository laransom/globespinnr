<!-- <div class='row'>
   <div class="small-6 large-centered columns text-center"><h1>Globespinnr</h1></div>
</div>

<div class='row'>
   <div class="small-6 large-centered columns text-center"><h3>Select a Country</h3></div>
</div>


  <div class='row'>
    <div class='small-12 large_centered columns'><%= select_tag :country, options_from_collection_for_select(@locations, 'id', 'name'), include_blank: true %></div>
  </div>
  <div class='row'>
    <div class='1-medium small-centered columns' id='submit'><a href='#' class='button'>Go</a></div>
  </div> -->

<html>
  <head>
    <title>First Globe</title>
    <style>canvas { width: 100%; height: 100% }</style>
  </head>

  <body>

    <script>
      var scene = new THREE.Scene();
      var camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);

      var renderer = new THREE.WebGLRenderer();
      renderer.setSize(window.innerWidth, window.innerHeight);
      document.body.appendChild(renderer.domElement);

      camera.position.z = 1;

      // var ambientLight = new THREE.AmbientLight(0x000044);
      // scene.add(ambientLight);

      var pointLight = new THREE.PointLight(0xFFFFFF);
        pointLight.position = camera.position;
        // pointLight.position.y = 100;
        // pointLight.position.z = 200;

        scene.add(pointLight);

        // var pointLights = new THREE.PointLight(0xFFFFFF);
        //   pointLights.position.x = 50;
        //   pointLights.position.y = 100;
        //   pointLights.position.z = -200;

        //   scene.add(pointLights);



      // var geometry = new THREE.SphereGeometry(0.5, 32, 32);
      // var material = new THREE.MeshBasicMaterial({color: 0x00ff00, wireframe: true});
      // var earthMesh = new THREE.Mesh(geometry, material);
      // scene.add(earthMesh);
      // THREE.ImageUtils.crossOrigin = 'anonymous';
      var geometry   = new THREE.SphereGeometry(0.5, 32, 32);
      var material  = new THREE.MeshPhongMaterial();
        material.map = THREE.ImageUtils.loadTexture('/assets/earthmap1k.jpg');
        material.bumpMap = THREE.ImageUtils.loadTexture('/assets/earthbump1k.jpg');
        material.bumpScale = 0.05;
        material.specularMap = THREE.ImageUtils.loadTexture('/assets/earthspec1k.jpg');
        material.specular = new THREE.Color('grey');

      var earthMesh = new THREE.Mesh(geometry, material);
      scene.add(earthMesh);


      // var geometry = new THREE.SphereGeometry(0.51, 32, 32);
      // var material = new THREE.MeshPhongMaterial({
      //   color : THREE.ImageUtils.loadTexture('/assets/earthcloudmap.jpg'),
      //   transparency : THREE.ImageUtils.loadTexture('/assets/earthcloudmaptrans.jpg'),
      // });

      // var canvasCloud = new THREE.Mesh(geometry, material);

      // var geometry = new THREE.SphereGeometry(0.51, 32, 32);
      // var material = new THREE.MeshPhongMaterial({
      //   map : new THREE.ImageUtils.loadTexture('/assets/canvas_cloud.jpg'),
      //   side : THREE.DoubleSide,
      //   opacity : 0.2,
      //   transparent : true,
      //   depthWrite : false,
      // });
      // var cloudMesh = new THREE.Mesh(geometry, material);
      // earthMesh.add(cloudMesh);


      // var geometry = new THREE.CubeGeometry(1,1,1);
      // var material = new THREE.MeshBasicMaterial({color: 0x00ff00, wireframe: true});
      // var material = new THREE.MeshPhongMaterial( { map: THREE.ImageUtils.loadTexture('images/box.png') } )
      // var cube = new THREE.Mesh(geometry, material);
      // scene.add(cube);



      // var geometry = new THREE.SphereGeometry(90, 32, 32);

      // var material = new HTHREE.MeshBasicMaterial();
      //   material.map = THREE.ImageUtils.loadTexture('/assets/galaxy_starfield.png');
      //   material.side = THREE.BackSide;

      //   var mesh = THREE.Mesh(geometry, material);
      //   scene.add(mesh);

      // camera.position.z = 1;
      // cube.position.x = -10;

      controls = new THREE.OrbitControls(camera, renderer.domElement);


      var render = function () {
        requestAnimationFrame(render);

        // cube.rotation.x += 0.01;
        // cube.rotation.y += 0.01;
        // cube.position.x += 0.03;

        renderer.render(scene, camera);
        controls.update();
      };

      render();
    </script>
  </body>
</html>
